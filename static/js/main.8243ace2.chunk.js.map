{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["UP","KEY_L","KEY_S","blockClassName","props","color","Block","className","style","backgroundColor","children","Blocks","window","map","item","index","key","count","keyList","keyValue","keySymbol","getKeySymbol","found","_","find","App","state","fpBlock","init","timer","setInterval","setState","tick","launchMissile","throttle","e","symbol","which","keyboard","savedState","cloneDeep","setTimeout","flatten","join","this","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2UAQMA,EAAK,GAGLC,EAAQ,GACRC,EAAQ,GAYRC,EAAiB,SAAAC,GACrB,MAAO,UAA4B,WAAhBA,EAAMC,MAAqB,UAAY,KAGtDC,EAAQ,SAAAF,GAAK,OAAK,yBAAKG,UAAWJ,EAAeC,GAAQI,MAAO,CAACC,gBAAiBL,EAAMC,QAASD,EAAMM,WACvGC,EAAS,SAAAP,GAAK,OAAkBA,EAAMQ,OAdtCC,KACF,SAACC,EAAMC,GAAP,OACE,kBAAC,EAAD,CAAOV,MAAOS,EAAKT,MAAOW,IAAKD,GAC5BD,EAAKG,WAaRC,EAAU,CACd,CAAEC,SA1BU,GA0BOC,UAAW,SAC9B,CAAED,SA1BS,GA0BOC,UAAW,QAC7B,CAAED,SAAUnB,EAAIoB,UAAW,MAC3B,CAAED,SA1BU,GA0BOC,UAAW,SAC9B,CAAED,SA1BS,GA0BOC,UAAW,SAGzBC,EAAe,SAACF,GACpB,IAAMG,EAAQC,IAAEC,KAAKN,GAAS,SAAAF,GAAG,OAAKA,EAAIG,WAAaA,KACvD,OAAOG,EAAQA,EAAMF,UAAY,MA+CpBK,E,YA3Cb,WAAYrB,GAAQ,IAAD,8BACjB,4CAAMA,KACDsB,MAAQC,IAAQC,KAAK,GAAI,IAC9B,EAAKF,MAAMG,MAAQC,aAAY,WAC7B,EAAKC,UAAS,SAACL,GAAD,OAAYC,IAAQK,KAAKN,QACtC,KAEH,EAAKO,cAAgBV,IAAEW,UAAS,SAACC,GAC/B,EAAKJ,UAAS,SAACL,GACb,IAAMU,EAASf,EAAac,EAAEE,OAC9B,OAAOD,EAAST,IAAQX,IAAIoB,EAAQV,GAASA,OAE9C,KAEHY,KAAoB,SAAAH,GACdA,EAAEE,QAAUrC,EACd,EAAKiC,cAAcE,GACVA,EAAEE,QAAUpC,EACrB,EAAK8B,UAAS,SAACL,GAAD,OAAYA,EAAMa,cACvBJ,EAAEE,QAAUnC,EACrB,EAAK6B,UAAS,SAACL,GAAD,MAAY,CAACa,WAAYhB,IAAEiB,UAAUd,OAEnDe,YAAW,WACT,EAAKV,UAAS,SAACL,GACb,IAAMU,EAASf,EAAac,EAAEE,OAC9B,OAAOD,EAAST,IAAQX,IAAIoB,EAAQV,GAASA,WAzBpC,E,sEAiCjB,OACE,yBAAKnB,UAAU,aACb,yBAAKA,UAAU,OACb,kBAACI,EAAD,CAAQC,OAAQW,IAAEmB,QAAQf,IAAQgB,KAAKC,KAAKlB,gB,GArCpCmB,aChCEC,QACW,cAA7BlC,OAAOmC,SAASC,UAEe,UAA7BpC,OAAOmC,SAASC,UAEhBpC,OAAOmC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8243ace2.chunk.js","sourcesContent":["import * as keyboard from 'keyboard-handler';\nimport React, { Component } from 'react';\nimport _ from 'lodash';\nimport './App.css';\nimport fpBlock from 'fp-block';\n\nconst SPACE = 32;\nconst LEFT = 37;\nconst UP = 38;\nconst RIGHT = 39;\nconst DOWN = 40;\nconst KEY_L = 76;\nconst KEY_S = 83;\n\nconst createBlocks = ary => (\n  ary.map(\n    (item, index) => (\n      <Block color={item.color} key={index}>\n        {item.count}\n      </Block>\n    )\n  )\n);\n\nconst blockClassName = props => {\n  return 'block ' + (props.color === 'yellow' ? 'missile' : '');\n}\n\nconst Block = props => (<div className={blockClassName(props)} style={{backgroundColor: props.color}}>{props.children}</div>);\nconst Blocks = props => (createBlocks(props.window));\n\nconst keyList = [\n  { keyValue: SPACE, keySymbol: 'space'},\n  { keyValue: LEFT, keySymbol: 'left' },\n  { keyValue: UP, keySymbol: 'up' },\n  { keyValue: RIGHT, keySymbol: 'right' },\n  { keyValue: DOWN, keySymbol: 'down' }\n];\n\nconst getKeySymbol = (keyValue) => {\n  const found = _.find(keyList, key => (key.keyValue === keyValue));\n  return found ? found.keySymbol : null;\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = fpBlock.init(40, 30);\n    this.state.timer = setInterval(() => {\n      this.setState((state) => (fpBlock.tick(state)));\n    }, 150);\n\n    this.launchMissile = _.throttle((e) => {\n      this.setState((state) => {\n        const symbol = getKeySymbol(e.which);\n        return symbol ? fpBlock.key(symbol, state) : state;\n      });\n    }, 500);\n\n    keyboard.keyPressed(e => {\n      if (e.which === UP) {\n        this.launchMissile(e);\n      } else if (e.which === KEY_L) {\n        this.setState((state) => (state.savedState));\n      } else if (e.which === KEY_S) {\n        this.setState((state) => ({savedState: _.cloneDeep(state)}));\n      } else {\n        setTimeout(() => {\n          this.setState((state) => {\n            const symbol = getKeySymbol(e.which);\n            return symbol ? fpBlock.key(symbol, state) : state;\n          });\n        });\n      }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"App\">\n          <Blocks window={_.flatten(fpBlock.join(this.state))} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}